<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace IdeaMachine.Common.Core.Extensions.Async
{
	public static class TupleAwaiterExtensions
	{
	<#
		for (var i = 2; i < 16; ++i)
		{
			var genericDeclarationsJoined = string.Join(", ", Enumerable.Range(0, i).Select(x => $"T{x}"));
			var lowerCaseGenericDeclarations = string.Join(", ", Enumerable.Range(0, i).Select(x => $"t{x}"));
	#>
	public static TaskAwaiter<(<#=genericDeclarationsJoined#>)> GetAwaiter<<#=genericDeclarationsJoined#>>(this (<#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"Task<T{x}>"))#>) tuple)
		{
			var (<#=lowerCaseGenericDeclarations#>) = tuple;

			return Task.WhenAll(<#=lowerCaseGenericDeclarations#>)
					.ContinueWith(_ => (<#=string.Join(", ", Enumerable.Range(0, i).Select(x => $"t{x}.Result"))#>))
					.GetAwaiter();
		}

	<#
		}
	#>
}
}